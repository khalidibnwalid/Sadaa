// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: server.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createServer = `-- name: CreateServer :one
Insert into servers (name, creator_id, cover_url) values ($1, $2, $3) returning id, name, cover_url, creator_id, created_at, updated_at
`

type CreateServerParams struct {
	Name      string    `json:"name"`
	CreatorID uuid.UUID `json:"creator_id"`
	CoverUrl  *string   `json:"cover_url"`
}

func (q *Queries) CreateServer(ctx context.Context, arg CreateServerParams) (Server, error) {
	row := q.db.QueryRow(ctx, createServer, arg.Name, arg.CreatorID, arg.CoverUrl)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverUrl,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getServerById = `-- name: GetServerById :one
Select id, name, cover_url, creator_id, created_at, updated_at from servers where id = $1 Limit 1
`

func (q *Queries) GetServerById(ctx context.Context, id uuid.UUID) (Server, error) {
	row := q.db.QueryRow(ctx, getServerById, id)
	var i Server
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CoverUrl,
		&i.CreatorID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
