// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms_groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRoomsGroup = `-- name: CreateRoomsGroup :one
Insert into rooms_groups (server_id, name, order_index) 
values ($1, $2, $3) 
returning id, server_id, name, permissions, created_at, updated_at, order_index
`

type CreateRoomsGroupParams struct {
	ServerID   uuid.UUID `json:"server_id"`
	Name       string    `json:"name"`
	OrderIndex int32     `json:"order_index"`
}

func (q *Queries) CreateRoomsGroup(ctx context.Context, arg CreateRoomsGroupParams) (*RoomsGroup, error) {
	row := q.db.QueryRow(ctx, createRoomsGroup, arg.ServerID, arg.Name, arg.OrderIndex)
	var i RoomsGroup
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderIndex,
	)
	return &i, err
}

const getRoomsGroupById = `-- name: GetRoomsGroupById :one
Select id, server_id, name, permissions, created_at, updated_at, order_index 
from rooms_groups 
where id = $1
limit 1
`

func (q *Queries) GetRoomsGroupById(ctx context.Context, id uuid.UUID) (*RoomsGroup, error) {
	row := q.db.QueryRow(ctx, getRoomsGroupById, id)
	var i RoomsGroup
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderIndex,
	)
	return &i, err
}

const getRoomsGroupByServerID = `-- name: GetRoomsGroupByServerID :many
Select id, server_id, name, permissions, created_at, updated_at, order_index 
from rooms_groups
where server_id = $1
`

func (q *Queries) GetRoomsGroupByServerID(ctx context.Context, serverID uuid.UUID) ([]*RoomsGroup, error) {
	rows, err := q.db.Query(ctx, getRoomsGroupByServerID, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*RoomsGroup
	for rows.Next() {
		var i RoomsGroup
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.Name,
			&i.Permissions,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OrderIndex,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoomsGroup = `-- name: UpdateRoomsGroup :one
Update rooms_groups
set name = $2,
    order_index = $3
where id = $1
returning id, server_id, name, permissions, created_at, updated_at, order_index
`

type UpdateRoomsGroupParams struct {
	ID         uuid.UUID `json:"id"`
	Name       string    `json:"name"`
	OrderIndex int32     `json:"order_index"`
}

func (q *Queries) UpdateRoomsGroup(ctx context.Context, arg UpdateRoomsGroupParams) (*RoomsGroup, error) {
	row := q.db.QueryRow(ctx, updateRoomsGroup, arg.ID, arg.Name, arg.OrderIndex)
	var i RoomsGroup
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.Name,
		&i.Permissions,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OrderIndex,
	)
	return &i, err
}
