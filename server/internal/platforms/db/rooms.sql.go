// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createRoom = `-- name: CreateRoom :one
Insert into rooms (server_id, group_id, name, order_index, type) 
values ($1, $2, $3, $4, $5) 
returning id, server_id, group_id, type, order_index, created_at, updated_at, permissions, name
`

type CreateRoomParams struct {
	ServerID   uuid.UUID `json:"server_id"`
	GroupID    uuid.UUID `json:"group_id"`
	Name       string    `json:"name"`
	OrderIndex *int32    `json:"order_index"`
	Type       string    `json:"type"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (*Room, error) {
	row := q.db.QueryRow(ctx, createRoom,
		arg.ServerID,
		arg.GroupID,
		arg.Name,
		arg.OrderIndex,
		arg.Type,
	)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.GroupID,
		&i.Type,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Permissions,
		&i.Name,
	)
	return &i, err
}

const getRoomById = `-- name: GetRoomById :one
Select id, server_id, group_id, type, order_index, created_at, updated_at, permissions, name 
from rooms 
where id = $1
limit 1
`

func (q *Queries) GetRoomById(ctx context.Context, id uuid.UUID) (*Room, error) {
	row := q.db.QueryRow(ctx, getRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.ServerID,
		&i.GroupID,
		&i.Type,
		&i.OrderIndex,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Permissions,
		&i.Name,
	)
	return &i, err
}

const getRoomsByGroupID = `-- name: GetRoomsByGroupID :many
Select id, server_id, group_id, type, order_index, created_at, updated_at, permissions, name 
from rooms 
where group_id = $1
`

func (q *Queries) GetRoomsByGroupID(ctx context.Context, groupID uuid.UUID) ([]*Room, error) {
	rows, err := q.db.Query(ctx, getRoomsByGroupID, groupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.ServerID,
			&i.GroupID,
			&i.Type,
			&i.OrderIndex,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Permissions,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
