// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: rooms_groups.sql

package db

import (
	"context"

	"github.com/google/uuid"
)


const getRoomsGroupWithRoomsByID = `-- name: GetRoomsGroupWithRoomsByID :one
SELECT 
  rooms_groups.id, rooms_groups.server_id, rooms_groups.name, rooms_groups.permissions, rooms_groups.created_at, rooms_groups.updated_at, rooms_groups.order_index,
  COALESCE(
    json_agg(rooms) FILTER (WHERE rooms.id IS NOT NULL),
    '[]'
  ) AS rooms
FROM rooms_groups
LEFT JOIN rooms ON rooms.group_id = rooms_groups.id
WHERE rooms_groups.id = $1
GROUP BY rooms_groups.id
`

type GetRoomsGroupWithRoomsByIDRow struct {
	RoomsGroup RoomsGroup `json:"rooms_group"`
	Rooms      []*Room     `json:"rooms"`
}

func (q *Queries) GetRoomsGroupWithRoomsByID(ctx context.Context, id uuid.UUID) (*GetRoomsGroupWithRoomsByIDRow, error) {
	row := q.db.QueryRow(ctx, getRoomsGroupWithRoomsByID, id)
	var i GetRoomsGroupWithRoomsByIDRow
	err := row.Scan(
		&i.RoomsGroup.ID,
		&i.RoomsGroup.ServerID,
		&i.RoomsGroup.Name,
		&i.RoomsGroup.Permissions,
		&i.RoomsGroup.CreatedAt,
		&i.RoomsGroup.UpdatedAt,
		&i.RoomsGroup.OrderIndex,
		&i.Rooms,
	)
	return &i, err
}

const getRoomsGroupWithRoomsByServerID = `-- name: GetRoomsGroupWithRoomsByServerID :many
SELECT 
  rooms_groups.id, rooms_groups.server_id, rooms_groups.name, rooms_groups.permissions, rooms_groups.created_at, rooms_groups.updated_at, rooms_groups.order_index,
  COALESCE(
    json_agg(rooms) FILTER (WHERE rooms.id IS NOT NULL),
    '[]'
  ) AS rooms
FROM rooms_groups
LEFT JOIN rooms ON rooms.group_id = rooms_groups.id
WHERE rooms_groups.server_id = $1
GROUP BY rooms_groups.id
`

type GetRoomsGroupWithRoomsByServerIDRow struct {
	RoomsGroup RoomsGroup `json:"rooms_group"`
	Rooms      []*Room     `json:"rooms"`
}

func (q *Queries) GetRoomsGroupWithRoomsByServerID(ctx context.Context, serverID uuid.UUID) ([]*GetRoomsGroupWithRoomsByServerIDRow, error) {
	rows, err := q.db.Query(ctx, getRoomsGroupWithRoomsByServerID, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetRoomsGroupWithRoomsByServerIDRow
	for rows.Next() {
		var i GetRoomsGroupWithRoomsByServerIDRow
		if err := rows.Scan(
			&i.RoomsGroup.ID,
			&i.RoomsGroup.ServerID,
			&i.RoomsGroup.Name,
			&i.RoomsGroup.Permissions,
			&i.RoomsGroup.CreatedAt,
			&i.RoomsGroup.UpdatedAt,
			&i.RoomsGroup.OrderIndex,
			&i.Rooms,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}