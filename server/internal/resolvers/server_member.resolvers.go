package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/khalidibnwalid/sadaa/server/internal/db"
	"github.com/khalidibnwalid/sadaa/server/internal/graph"
)

// JoinServer is the resolver for the joinServer field.
func (r *mutationResolver) JoinServer(ctx context.Context, serverID uuid.UUID) (*db.ServerMember, error) {
	panic(fmt.Errorf("not implemented: JoinServer - joinServer"))
}

// GetServersOfUser is the resolver for the getServersOfUser field.
func (r *queryResolver) GetServersOfUser(ctx context.Context) ([]*db.ServerMember, error) {
	panic(fmt.Errorf("not implemented: GetServersOfUser - getServersOfUser"))
}

// GetServerMember is the resolver for the getServerMember field.
func (r *queryResolver) GetServerMember(ctx context.Context, serverID uuid.UUID) (*db.ServerMember, error) {
	panic(fmt.Errorf("not implemented: GetServerMember - getServerMember"))
}

// ID is the resolver for the id field.
func (r *serverMemberResolver) ID(ctx context.Context, obj *db.ServerMember) (uuid.UUID, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *serverMemberResolver) CreatedAt(ctx context.Context, obj *db.ServerMember) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *serverMemberResolver) UpdatedAt(ctx context.Context, obj *db.ServerMember) (*time.Time, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// Server is the resolver for the server field.
func (r *serverMemberResolver) Server(ctx context.Context, obj *db.ServerMember) (*db.Server, error) {
	panic(fmt.Errorf("not implemented: Server - server"))
}

// ServerMember returns graph.ServerMemberResolver implementation.
func (r *Resolver) ServerMember() graph.ServerMemberResolver { return &serverMemberResolver{r} }

type serverMemberResolver struct{ *Resolver }
