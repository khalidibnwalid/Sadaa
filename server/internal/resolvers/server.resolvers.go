package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/khalidibnwalid/sadaa/server/internal/db"
	"github.com/khalidibnwalid/sadaa/server/internal/graph"
	graph_models "github.com/khalidibnwalid/sadaa/server/internal/graph/models"
	"github.com/khalidibnwalid/sadaa/server/internal/models"
	"github.com/khalidibnwalid/sadaa/server/internal/services/auth"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateServer is the resolver for the createServer field.
func (r *mutationResolver) CreateServer(ctx context.Context, input graph_models.CreateServerInput) (*models.ServerMember, error) {
	userid, ok := auth.For(ctx)
	if !ok {
		return nil, gqlerror.Wrap(ErrUnauthorized)
	}

	server, err := r.DB.CreateServer(ctx, db.CreateServerParams{
		Name:      input.Name,
		CreatorID: *userid,
		CoverUrl:  &input.CoverURL,
	})

	if err != nil {
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}

	serverMember, err := r.DB.CreateServerMember(ctx, db.CreateServerMemberParams{
		ServerID: server.ID,
		UserID:   *userid,
	})

	if err != nil {
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}

	return &models.ServerMember{
		ServerMember: serverMember,
		Server:       server,
	}, nil
}

// Server is the resolver for the server field.
func (r *queryResolver) Server(ctx context.Context, id uuid.UUID) (*models.Server, error) {
	if !auth.IsAuthed(ctx) {
		return nil, gqlerror.Wrap(ErrUnauthorized)
	}

	// TODO: add Not Found response
	server, err := r.DB.GetServerById(ctx, id)
	if err != nil {
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}
	return models.NewServer(server), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *serverResolver) CreatedAt(ctx context.Context, obj *models.Server) (*time.Time, error) {
	return &obj.CreatedAt.Time, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *serverResolver) UpdatedAt(ctx context.Context, obj *models.Server) (*time.Time, error) {
	return &obj.UpdatedAt.Time, nil
}

// Server returns graph.ServerResolver implementation.
func (r *Resolver) Server() graph.ServerResolver { return &serverResolver{r} }

type serverResolver struct{ *Resolver }
