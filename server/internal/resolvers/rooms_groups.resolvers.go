package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5"
	"github.com/khalidibnwalid/sadaa/server/internal/db"
	"github.com/khalidibnwalid/sadaa/server/internal/graph"
	graph_models "github.com/khalidibnwalid/sadaa/server/internal/graph/models"
	"github.com/khalidibnwalid/sadaa/server/internal/models"
	"github.com/khalidibnwalid/sadaa/server/internal/services/auth"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// CreateRoomsGroup is the resolver for the createRoomsGroup field.
func (r *mutationResolver) CreateRoomsGroup(ctx context.Context, input graph_models.CreateRoomsGroupInput) (*models.RoomsGroup, error) {
	if ok := auth.IsAuthed(ctx); !ok {
		return nil, gqlerror.Wrap(ErrUnauthorized)
	}

	roomsGroup, err := r.DB.CreateRoomsGroup(ctx, db.CreateRoomsGroupParams{
		ServerID:   input.ServerID,
		Name:       input.Name,
		OrderIndex: input.OrderIndex,
	})

	if err != nil {
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}

	return models.NewRoomsGroup(roomsGroup, []*db.Room{}), nil
}

// UpdateRoomsGroup is the resolver for the updateRoomsGroup field.
func (r *mutationResolver) UpdateRoomsGroup(ctx context.Context, id uuid.UUID, input graph_models.UpdateRoomsGroupInput) (*models.RoomsGroup, error) {
	panic(fmt.Errorf("not implemented: UpdateRoomsGroup - updateRoomsGroup"))
}

// RoomsGroups is the resolver for the roomsGroups field.
func (r *queryResolver) RoomsGroups(ctx context.Context, serverID uuid.UUID) ([]*models.RoomsGroup, error) {
	if ok := auth.IsAuthed(ctx); !ok {
		return nil, gqlerror.Wrap(ErrUnauthorized)
	}

	// TODO, Update query to include all rooms of all
	roomsgroups, err := r.DB.GetRoomsGroupWithRoomsByServerID(ctx, serverID)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, gqlerror.Wrap(ErrNotFound)
		}
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}

	result := make([]*models.RoomsGroup, len(roomsgroups))
	for i, r := range roomsgroups {
		result[i] = models.NewRoomsGroup(&r.RoomsGroup, r.Rooms)
	}

	return result, nil
}

// RoomsGroup is the resolver for the roomsGroup field.
func (r *queryResolver) RoomsGroup(ctx context.Context, id uuid.UUID) (*models.RoomsGroup, error) {
	if ok := auth.IsAuthed(ctx); !ok {
		return nil, gqlerror.Wrap(ErrUnauthorized)
	}

	roomsGroup, err := r.DB.GetRoomsGroupWithRoomsByID(ctx, id)
	if err != nil {
		if err == pgx.ErrNoRows {
			return nil, gqlerror.Wrap(ErrNotFound)
		}
		return nil, gqlerror.Wrap(ErrInternalServerError)
	}

	return models.NewRoomsGroup(&roomsGroup.RoomsGroup, roomsGroup.Rooms), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *roomsGroupResolver) CreatedAt(ctx context.Context, obj *models.RoomsGroup) (*time.Time, error) {
	return &obj.CreatedAt.Time, nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *roomsGroupResolver) UpdatedAt(ctx context.Context, obj *models.RoomsGroup) (*time.Time, error) {
	return &obj.UpdatedAt.Time, nil
}

// RoomsGroup returns graph.RoomsGroupResolver implementation.
func (r *Resolver) RoomsGroup() graph.RoomsGroupResolver { return &roomsGroupResolver{r} }

type roomsGroupResolver struct{ *Resolver }
